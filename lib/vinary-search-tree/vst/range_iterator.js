// Generated by CoffeeScript 1.7.1
(function() {
  var Entity, Iterator, Node, RangeIterator, global, p,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof exports !== 'undefined') {
    global = exports;
    Entity = require('./entity').vst.Entity;
    Iterator = require('./iterator').vst.Iterator;
    Node = require('./node').vst.Node;
    p = require('./predicates').vst.predicates;
  } else if (typeof window !== 'undefined') {
    global = window;
    Entity = window.vst.Entity;
    Iterator = window.vst.Iterator;
    Node = window.vst.Node;
    p = window.vst.predicates;
  } else {
    global = this;
    Entity = this.vst.Entity;
    Iterator = this.vst.Iterator;
    Node = this.vst.Node;
    p = this.vst.predicates;
  }

  RangeIterator = (function(_super) {
    __extends(RangeIterator, _super);

    RangeIterator.of = function(node, upper_key, comparator) {
      return new RangeIterator().node(node).upper_key(upper_key).comparator(comparator);
    };

    RangeIterator.empty = function() {
      return this.of(null, -1, function(a, b) {
        return 1;
      });
    };

    function RangeIterator(subtypes) {
      if (subtypes == null) {
        subtypes = [];
      }
      subtypes.push(RangeIterator);
      RangeIterator.__super__.constructor.call(this, subtypes);
    }

    RangeIterator.prototype.advance = function() {
      if (this.next_element() === null && this.node()) {
        if (this.comparator()(this.node().key(), this.upper_key()) <= 0) {
          this.next_element(this.node());
          this.node(this.node().greater_neighbor());
        }
      }
      return true;
    };

    return RangeIterator;

  })(Iterator);

  Entity.def_properties(RangeIterator, {
    comparator: {},
    node: {},
    upper_key: {}
  });

  Entity.def_toString(RangeIterator);

  global.vst || (global.vst = {});

  global.vst.RangeIterator = RangeIterator;

}).call(this);
