// Generated by CoffeeScript 1.7.1
(function() {
  var Entity, Iterator, Node, RangeIterator, global, p,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof exports !== 'undefined') {
    global = exports;
    Entity = require('./entity').vst.Entity;
    Iterator = require('./iterator').vst.Iterator;
    Node = require('./node').vst.Node;
    p = require('./predicates').vst.predicates;
  } else if (typeof window !== 'undefined') {
    global = window;
    Entity = window.vst.Entity;
    Iterator = window.vst.Iterator;
    Node = window.vst.Node;
    p = window.vst.predicates;
  } else {
    global = this;
    Entity = this.vst.Entity;
    Iterator = this.vst.Iterator;
    Node = this.vst.Node;
    p = this.vst.predicates;
  }

  RangeIterator = (function(_super) {
    __extends(RangeIterator, _super);

    RangeIterator.of = function(node, upper_key) {
      return new RangeIterator().node(node).upper_key(upper_key);
    };

    function RangeIterator(subtypes) {
      if (subtypes == null) {
        subtypes = [];
      }
      if (!(this instanceof RangeIterator)) {
        return new RangeIterator(subtypes);
      }
      RangeIterator.__super__.constructor.call(this, subtypes.push(RangeIterator));
    }

    RangeIterator.prototype.advance = function() {
      if (this.next_element() === null && this.node) {
        if (this.compare()(this.node().key(), this.upper_key) <= 0) {
          if (this.node_cursor() >= this.node().values().length) {
            this.node_cursor(0);
            this.node(this.node().greater_neighbor());
            return this.advance();
          }
          this.current_element(this.node().values()[this.node_cursor()]);
          this.node_cursor(1 + this.node_cursor());
        }
      }
      return true;
    };

    return RangeIterator;

  })(Iterator);

  Entity.def_properties(RangeIterator, {
    compare: {
      is_valid: p.conjoin(p.is_function, p.has_arity(2))
    },
    node_cursor: {
      initial_value: 0,
      is_valid: p.is_non_negative_number
    },
    node: {
      is_valid: p.disjoin(p.is_null, p.is_instance(Node))
    },
    upper_key: {
      is_valid: p.tautology
    }
  });

  Entity.def_toString(RangeIterator);

  global.vst || (global.vst = {});

  global.vst.RangeIterator = RangeIterator;

}).call(this);
