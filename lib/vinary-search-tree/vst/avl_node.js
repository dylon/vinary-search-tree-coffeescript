// Generated by CoffeeScript 1.7.1
(function() {
  var AvlNode, Entity, Node, f, global, is_avl_node, p,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof exports !== 'undefined') {
    global = exports;
    Entity = require('./entity').vst.Entity;
    Node = require('./node').vst.Node;
    p = require('./predicates').vst.predicates;
    f = require('./functions').vst.functions;
  } else if (typeof window !== 'undefined') {
    global = window;
    Entity = window.vst.Entity;
    Node = window.vst.Node;
    p = window.vst.predicates;
    f = window.vst.functions;
  } else {
    global = this;
    Entity = this.vst.Entity;
    Node = window.vst.Node;
    p = this.vst.predicates;
    f = this.vst.functions;
  }

  AvlNode = (function(_super) {
    __extends(AvlNode, _super);

    AvlNode.of = function(key, value) {
      var node;
      node = new AvlNode().key(key);
      node.values().push(value);
      return node;
    };

    function AvlNode(subtypes) {
      if (subtypes == null) {
        subtypes = [];
      }
      if (!(this instanceof AvlNode)) {
        return new AvlNode(subtypes);
      }
      subtypes.push(AvlNode);
      AvlNode.__super__.constructor.call(this, subtypes);
    }

    AvlNode.prototype.max_child_height = function() {
      var greater_child_height, lesser_child_height;
      lesser_child_height = this.lesser_child() ? this.lesser_child().height() : -1;
      greater_child_height = this.greater_child() ? this.greater_child().height() : -1;
      return Math.max(lesser_child_height, greater_child_height);
    };

    AvlNode.prototype.balance = function() {
      var greater_child_height, lesser_child_height;
      lesser_child_height = this.lesser_child() ? this.lesser_child().height() : -1;
      greater_child_height = this.greater_child() ? this.greater_child().height() : -1;
      return lesser_child_height - greater_child_height;
    };

    AvlNode.prototype.is_balanced = function() {
      var _ref;
      return (-1 <= (_ref = this.balance()) && _ref <= 1);
    };

    return AvlNode;

  })(Node);

  is_avl_node = p.is_instance(AvlNode);

  Entity.def_properties(AvlNode, {
    parent: {
      initial_value: null,
      is_valid: p.disjoin(is_avl_node, p.is_null),
      stringify: false
    }
  });

  Entity.def_toString(AvlNode);

  global.vst || (global.vst = {});

  global.vst.AvlNode = AvlNode;

}).call(this);
