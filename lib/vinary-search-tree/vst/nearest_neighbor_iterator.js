// Generated by CoffeeScript 1.7.1
(function() {
  var Entity, Iterator, NearestNeighborIterator, Node, f, find_nearest, global, p,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof exports !== 'undefined') {
    global = exports;
    Entity = require('./entity').vst.Entity;
    Iterator = require('./iterator').vst.Iterator;
    Node = require('./node').vst.Node;
    p = require('./predicates').vst.predicates;
    f = require('./functions').vst.functions;
  } else if (typeof window !== 'undefined') {
    global = window;
    Entity = window.vst.Entity;
    Iterator = window.vst.Iterator;
    Node = window.vst.Node;
    p = window.vst.predicates;
    f = windwow.vst.functions;
  } else {
    global = this;
    Entity = this.vst.Entity;
    Iterator = this.vst.Iterator;
    Node = this.vst.Node;
    p = this.vst.predicates;
    f = this.vst.functions;
  }

  find_nearest = function(key, node, distance) {
    var d_0, d_1, d_2, greater, lesser;
    lesser = node.lesser_neighbor();
    greater = node.greater_neighbor();
    while (true) {
      if (lesser) {
        if (greater) {
          d_0 = distance(node.key(), key);
          d_1 = distance(lesser.key(), key);
          d_2 = distance(greater.key(), key);
          if (d_1 < d_0) {
            if (d_2 < d_1) {
              node = greater;
              greater = greater.greater_neighbor();
            } else {
              node = lesser;
              lesser = lesser.lesser_neighbor();
            }
          } else if (d_2 < d_0) {
            node = greater;
            greater = greater.greater_neighbor();
          } else {
            return node;
          }
        } else if (distance(lesser.key(), key) < distance(node.key(), key)) {
          node = lesser;
          lesser = lesser.lesser_neighbor();
        } else {
          return node;
        }
      } else if (greater) {
        if (distance(greater.key(), key) < distance(node.key(), key)) {
          node = greater;
          greater = greater.greater_neighbor();
        } else {
          return node;
        }
      } else {
        return node;
      }
    }
  };

  NearestNeighborIterator = (function(_super) {
    __extends(NearestNeighborIterator, _super);

    NearestNeighborIterator.of = function(node, key, k, distance) {
      var iter;
      f.assert(node instanceof Node);
      f.assert(p.is_defined(key));
      f.assert(p.is_non_negative_number(k));
      f.assert(p.is_function(distance));
      node = find_nearest(key, node, distance);
      iter = new NearestNeighborIterator().distance(distance).key(key).k(k);
      if (k > 0) {
        iter.next_element(node).greater_neighbor(node.greater_neighbor()).lesser_neighbor(node.lesser_neighbor()).i(1);
      }
      return iter;
    };

    NearestNeighborIterator.empty = function() {
      return new NearestNeighborIterator().neighbors([]);
    };

    function NearestNeighborIterator(subtypes) {
      if (subtypes == null) {
        subtypes = [];
      }
      f.assert(p.is_array(subtypes));
      subtypes.push(NearestNeighborIterator);
      NearestNeighborIterator.__super__.constructor.call(this, subtypes);
    }

    NearestNeighborIterator.prototype.advance = function() {
      var d_greater_neighbor, d_lesser_neighbor;
      if (this.next_element() === null && this.i() < this.k()) {
        if (this.lesser_neighbor()) {
          if (this.greater_neighbor()) {
            d_lesser_neighbor = this.distance()(this.lesser_neighbor().key(), this.key());
            d_greater_neighbor = this.distance()(this.greater_neighbor().key(), this.key());
            if (d_lesser_neighbor < d_greater_neighbor) {
              this.next_element(this.lesser_neighbor());
              this.lesser_neighbor(this.lesser_neighbor().lesser_neighbor());
              this.i(1 + this.i());
            } else {
              this.next_element(this.greater_neighbor());
              this.greater_neighbor(this.greater_neighbor().greater_neighbor());
              this.i(1 + this.i());
            }
          } else {
            this.next_element(this.lesser_neighbor());
            this.lesser_neighbor(this.lesser_neighbor().lesser_neighbor());
            this.i(1 + this.i());
          }
        } else if (this.greater_neighbor()) {
          this.next_element(this.greater_neighbor());
          this.greater_neighbor(this.greater_neighbor().greater_neighbor());
          this.i(1 + this.i());
        }
      }
      return true;
    };

    return NearestNeighborIterator;

  })(Iterator);

  Entity.def_properties(NearestNeighborIterator, {
    node: {
      is_valid: p.is_instance(Node)
    },
    lesser_neighbor: {
      is_valid: p.disjoin(p.is_instance(Node), p.is_null)
    },
    greater_neighbor: {
      is_valid: p.disjoin(p.is_instance(Node), p.is_null)
    },
    key: {
      is_valid: p.is_defined
    },
    k: {
      is_valid: p.is_non_negative_number
    },
    i: {
      is_valid: p.is_non_negative_number,
      initial_value: 0
    },
    distance: {
      is_valid: p.is_function
    }
  });

  Entity.def_toString(NearestNeighborIterator);

  global.vst || (global.vst = {});

  global.vst.NearestNeighborIterator = NearestNeighborIterator;

}).call(this);
