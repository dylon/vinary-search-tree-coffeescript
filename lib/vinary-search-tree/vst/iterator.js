// Generated by CoffeeScript 1.7.1
(function() {
  var Entity, Iterator, global, p,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof exports !== 'undefined') {
    global = exports;
    Entity = require('./entity').vst.Entity;
    p = require('./predicates').vst.predicates;
  } else if (typeof window !== 'undefined') {
    global = window;
    Entity = window.vst.Entity;
    p = window.vst.predicates;
  } else {
    global = this;
    Entity = this.vst.Entity;
    p = this.vst.predicates;
  }

  Iterator = (function(_super) {
    __extends(Iterator, _super);

    function Iterator() {
      return Iterator.__super__.constructor.apply(this, arguments);
    }

    Iterator.prototype.Iterator = function(subtypes) {
      if (subtypes == null) {
        subtypes = [];
      }
      if (this.constructor === Iterator) {
        throw new Error("vst.Iterator should not be instantiated directly");
      }
      if (subtypes.length === 0) {
        throw new Error("You must specify the subtype as an array to this constructor");
      }
      subtypes.push(Iterator);
      return Iterator.__super__.Iterator.call(this, subtypes);
    };

    Iterator.prototype.has_next = function() {
      this.advance();
      return this.next_element() !== null;
    };

    Iterator.prototype.peek = function() {
      this.advance();
      return this.next_element();
    };

    Iterator.prototype.next = function() {
      var next_element;
      this.advance();
      next_element = this.next_element();
      this.next_element(null);
      return next_element;
    };

    return Iterator;

  })(Entity);

  Entity.def_abstract_methods(Iterator, {
    advance: {
      arity: 0
    }
  });

  Entity.def_properties(Iterator, {
    next_element: {
      initial_value: null,
      is_valid: p.tautology
    }
  });

  global.vst || (global.vst = {});

  global.vst.Iterator = Iterator;

}).call(this);
