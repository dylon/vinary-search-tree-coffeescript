// Generated by CoffeeScript 1.7.1
(function() {
  var Entity, ExcludeIterator, Iterator, MapIterator, SelectIterator, TakeIterator, TakeWhileIterator, f, global, is_iterator, p,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  if (typeof exports !== 'undefined') {
    global = exports;
    Entity = require('./entity').vst.Entity;
    p = require('./predicates').vst.predicates;
    f = require('./functions').vst.functions;
  } else if (typeof window !== 'undefined') {
    global = window;
    Entity = window.vst.Entity;
    p = window.vst.predicates;
    f = windwow.vst.functions;
  } else {
    global = this;
    Entity = this.vst.Entity;
    p = this.vst.predicates;
    f = this.vst.functions;
  }

  Iterator = (function(_super) {
    __extends(Iterator, _super);

    function Iterator() {
      return Iterator.__super__.constructor.apply(this, arguments);
    }

    Iterator.prototype.Iterator = function(subtypes) {
      if (subtypes == null) {
        subtypes = [];
      }
      if (this.constructor === Iterator) {
        throw new Error("vst.Iterator should not be instantiated directly");
      }
      if (subtypes.length === 0) {
        throw new Error("You must specify the subtype as an array to this constructor");
      }
      subtypes.push(Iterator);
      return Iterator.__super__.Iterator.call(this, subtypes);
    };

    Iterator.prototype.has_next = function() {
      this.advance();
      return this.next_element() !== null;
    };

    Iterator.prototype.peek = function() {
      this.advance();
      return this.next_element();
    };

    Iterator.prototype.next = function() {
      var next_element;
      this.advance();
      next_element = this.next_element();
      this.next_element(null);
      return next_element;
    };

    Iterator.prototype.to_array = function() {
      var array;
      array = [];
      while (this.has_next()) {
        array.push(this.next());
      }
      return array;
    };

    Iterator.prototype.mapref = function() {
      var args, ref;
      ref = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return this.map(function() {
        return this[ref].apply(this, args);
      });
    };

    Iterator.prototype.map = function(fn) {
      return MapIterator.of(this, fn);
    };

    Iterator.prototype.each = function(fn) {
      var element, index;
      f.assert(p.is_function(fn));
      index = 0;
      while (this.has_next()) {
        element = this.next();
        fn.call(element, element, index);
        index += 1;
      }
      return this;
    };

    Iterator.prototype.select = function(is_valid) {
      return SelectIterator.of(this, is_valid);
    };

    Iterator.prototype.exclude = function(is_valid) {
      return ExcludeIterator.of(this, is_valid);
    };

    Iterator.prototype.take = function(n) {
      return TakeIterator.of(this, n);
    };

    Iterator.prototype.take_while = function(is_valid) {
      return TakeWhileIterator.of(this, is_valid);
    };

    Iterator.prototype.drop = function(n) {
      var i;
      f.assert(p.is_non_negative_number(n));
      i = -1;
      while ((i += 1) < n && this.has_next()) {
        this.next();
      }
      return this;
    };

    Iterator.prototype.drop_while = function(is_valid) {
      var i;
      f.assert(p.is_function(is_valid));
      i = -1;
      while ((i += 1) < n && this.has_next()) {
        if (!is_valid.call(this.peek(), this.peek())) {
          break;
        }
        this.next();
      }
      return this;
    };

    return Iterator;

  })(Entity);

  Entity.def_abstract_methods(Iterator, {
    advance: {
      arity: 0
    }
  });

  Entity.def_properties(Iterator, {
    next_element: {
      initial_value: null,
      is_valid: p.tautology
    }
  });

  is_iterator = p.is_instance(Iterator);

  MapIterator = (function(_super) {
    __extends(MapIterator, _super);

    MapIterator.of = function(iterator, fn) {
      return new MapIterator().iterator(iterator).fn(fn);
    };

    function MapIterator(subtypes) {
      if (subtypes == null) {
        subtypes = [];
      }
      f.assert(p.is_array(subtypes));
      subtypes.push(MapIterator);
      MapIterator.__super__.constructor.call(this, subtypes);
    }

    MapIterator.prototype.advance = function() {
      var element;
      if (this.next_element() === null && this.iterator().has_next()) {
        element = this.iterator().next();
        this.next_element(this.fn().call(element, element, this.i()));
        this.i(1 + this.i());
      }
      return true;
    };

    return MapIterator;

  })(Iterator);

  Entity.def_properties(MapIterator, {
    iterator: {
      is_valid: is_iterator
    },
    fn: {
      is_valid: p.is_function
    },
    i: {
      is_valid: p.is_non_negative_number,
      initial_value: 0
    }
  });

  Entity.def_toString(MapIterator);

  TakeIterator = (function(_super) {
    __extends(TakeIterator, _super);

    TakeIterator.of = function(iterator, n) {
      return new TakeIterator().iterator(iterator).n(n);
    };

    function TakeIterator(subtypes) {
      if (subtypes == null) {
        subtypes = [];
      }
      f.assert(p.is_array(subtypes));
      subtypes.push(TakeIterator);
      TakeIterator.__super__.constructor.call(this, subtypes);
    }

    TakeIterator.prototype.advance = function() {
      if (this.next_element() === null && this.i() < this.n()) {
        this.next_element(this.iterator().next());
      }
      return true;
    };

    return TakeIterator;

  })(Iterator);

  Entity.def_properties(TakeIterator, {
    iterator: {
      is_valid: is_iterator
    },
    n: {
      is_valid: p.is_non_negative_number
    },
    i: {
      is_valid: p.is_non_negative_number,
      initial_value: 0
    }
  });

  Entity.def_toString(TakeIterator);

  TakeWhileIterator = (function(_super) {
    __extends(TakeWhileIterator, _super);

    TakeWhileIterator.of = function(iterator, is_valid) {
      return new TakeWhileIterator().iterator(iterator).n(is_valid);
    };

    function TakeWhileIterator(subtypes) {
      if (subtypes == null) {
        subtypes = [];
      }
      f.assert(p.is_array(subtypes));
      subtypes.push(TakeWhileIterator);
      TakeWhileIterator.__super__.constructor.call(this, subtypes);
    }

    TakeWhileIterator.prototype.advance = function() {
      var element;
      if (this.next_element() === null && this.iterator().has_next()) {
        element = this.iterator().peek();
        if (this.is_valid().call(element, element)) {
          this.next_element(this.iterator().next());
        }
      }
      return true;
    };

    return TakeWhileIterator;

  })(Iterator);

  Entity.def_properties(TakeWhileIterator, {
    iterator: {
      is_valid: is_iterator
    },
    is_valid: {
      is_valid: p.is_function
    }
  });

  Entity.def_toString(TakeWhileIterator);

  SelectIterator = (function(_super) {
    __extends(SelectIterator, _super);

    SelectIterator.of = function(iterator, is_valid) {
      return new SelectIterator().iterator(iterator).is_valid(is_valid);
    };

    function SelectIterator(subtypes) {
      if (subtypes == null) {
        subtypes = [];
      }
      f.assert(p.is_array(subtypes));
      subtypes.push(SelectIterator);
      SelectIterator.__super__.constructor.call(this, subtypes);
    }

    SelectIterator.prototype.advance = function() {
      var element;
      if (this.next_element() === null) {
        element = this.iterator().next();
        while (element && this.is_valid().call(element, element) === false) {
          element = this.iterator().next();
        }
        this.next_element(element);
      }
      return true;
    };

    return SelectIterator;

  })(Iterator);

  Entity.def_properties(SelectIterator, {
    iterator: {
      is_valid: is_iterator
    },
    is_valid: {
      is_valid: p.is_function
    }
  });

  Entity.def_toString(SelectIterator);

  ExcludeIterator = (function(_super) {
    __extends(ExcludeIterator, _super);

    ExcludeIterator.of = function(iterator, is_valid) {
      return new ExcludeIterator().iterator(iterator).is_valid(is_valid);
    };

    function ExcludeIterator(subtypes) {
      if (subtypes == null) {
        subtypes = [];
      }
      f.assert(p.is_array(subtypes));
      subtypes.push(ExcludeIterator);
      ExcludeIterator.__super__.constructor.call(this, subtypes);
    }

    ExcludeIterator.prototype.advance = function() {
      var element;
      if (this.next_element() === null) {
        element = this.iterator().next();
        while (element && this.is_valid().call(element, element) === true) {
          element = this.iterator().next();
        }
        this.next_element(element);
      }
      return true;
    };

    return ExcludeIterator;

  })(Iterator);

  Entity.def_properties(ExcludeIterator, {
    iterator: {
      is_valid: is_iterator
    },
    is_valid: {
      is_valid: p.is_function
    }
  });

  Entity.def_toString(ExcludeIterator);

  global.vst || (global.vst = {});

  global.vst.Iterator = Iterator;

}).call(this);
