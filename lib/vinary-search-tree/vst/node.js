// Generated by CoffeeScript 1.7.1
(function() {
  var Entity, Node, f, global, is_node, p,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof exports !== 'undefined') {
    global = exports;
    Entity = require('./entity').vst.Entity;
    p = require('./predicates').vst.predicates;
    f = require('./functions').vst.functions;
  } else if (typeof window !== 'undefined') {
    global = window;
    Entity = window.vst.Entity;
    p = window.vst.predicates;
    f = window.vst.functions;
  } else {
    global = this;
    Entity = this.vst.Entity;
    p = this.vst.predicates;
    f = this.vst.functions;
  }

  Node = (function(_super) {
    __extends(Node, _super);

    function Node(subtypes) {
      if (subtypes == null) {
        subtypes = [];
      }
      if (this.constructor === Node) {
        throw new Error("vst.Node should not be instantiated directly");
      }
      if (subtypes.length === 0) {
        throw new Error("You must specify the subtype as an array to this constructor");
      }
      subtypes.push(Node);
      Node.__super__.constructor.call(this, subtypes);
    }

    Node.prototype.is_leaf = function() {
      return this.lesser_child() === null && this.greater_child() === null;
    };

    Node.prototype.is_branch = function() {
      return !!this.lesser_child() ^ !!this.greater_child() === 1;
    };

    Node.prototype.value = function() {
      if (this.values().length === 0) {
        return null;
      } else if (this.values().length === 1) {
        return this.values()[0];
      } else {
        throw new Error("There are multiple values, please use Node::values() instead.");
      }
    };

    return Node;

  })(Entity);

  Entity.def_properties(Node, {
    key: {
      is_valid: p.tautology
    },
    values: {
      is_valid: p.is_array,
      init: function() {
        return [];
      }
    },
    height: {
      initial_value: 0,
      is_valid: p.is_non_negative_number
    },
    greater_child: {
      initial_value: null,
      is_valid: p.disjoin(p.is_null, p.is_instance(Node))
    },
    lesser_child: {
      initial_value: null,
      is_valid: p.disjoin(p.is_null, p.is_instance(Node))
    },
    greater_neighbor: {
      initial_value: null,
      is_valid: p.disjoin(p.is_null, p.is_instance(Node))
    },
    lesser_neighbor: {
      initial_value: null,
      is_valid: p.disjoin(p.is_null, p.is_instance(Node))
    }
  });

  is_node = p.is_instance(Node);

  global.vst || (global.vst = {});

  global.vst.Node = Node;

}).call(this);
